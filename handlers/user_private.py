from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Specialist, ClientQuery
from database.orm_query import orm_get_specialists_category
from kbds.reply import MAIN_BTNS, SPECIALIST_CATEGORIES, WORK_FORMAT_KB, GENDER_KB, CANCEL_KB
from logic.pdf_reader import extract_text_from_pdf
from logic.recomendation_ai import compare_texts
from states.states import FindSpecialist, AddSpecialist, Vacancies
from logic.vacancy_parsing import get_vacancies

user_private_router = Router()


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Digix.Ai ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –ø–æ–∏—Å–∫–µ –æ–Ω–ª–∞–π–Ω-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤üë®‚Äçüíª",
                         reply_markup=MAIN_BTNS
                         )


@user_private_router.message(or_f(Command('vacancy'), (F.text.lower() == '–≤–∞–∫–∞–Ω—Å–∏–∏ üíº')))
async def vacancy_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=CANCEL_KB)
    await state.set_state(Vacancies.vacancy_query)


@user_private_router.message(Vacancies.vacancy_query, F.text)
async def send_vacancies(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await cancel_handler(message, state)
        return
    await state.update_data(vacancy_query=message.text)
    await message.answer('–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤–∞—Å...')

    user_data = await state.get_data()
    query = user_data['vacancy_query']
    vacancies = get_vacancies(query)

    if vacancies:

        for vacancy in vacancies[:5]:
            response = (f"–ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy['title']}\n"
                        f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company']}\n"
                        f"–ì–æ—Ä–æ–¥: {vacancy['city']}\n"
                        f"–°—Å—ã–ª–∫–∞: {vacancy['link']}")
            await message.answer(response, reply_markup=MAIN_BTNS)
    else:
        await message.answer("–í–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=MAIN_BTNS)

    await state.clear()


@user_private_router.message(or_f(Command('find_specialist'), (F.text.lower() == '—è –∏—â—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ üîç')))
async def find_specialist_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ',
                         reply_markup=SPECIALIST_CATEGORIES)
    await state.set_state(FindSpecialist.query_category)


@user_private_router.message(FindSpecialist.query_category,
                             or_f((F.text.lower() == 'it'),
                                  (F.text.lower() == '—Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥'),
                                  (F.text.lower() == '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏ –≤–µ–±-–¥–∏–∑–∞–π–Ω'),
                                  (F.text.lower() == '–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–æ–∑–¥–∞–Ω–∏–µ'),
                                  (F.text.lower() == '–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã'),
                                  (F.text.lower() == '–ø–µ—Ä–µ–≤–æ–¥—ã'),
                                  (F.text.lower() == '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ'),
                                  (F.text.lower() == '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏'),
                                  (F.text.lower() == '–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                                  (F.text.lower() == 'it-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')))
async def find_specialist_query(message: types.Message, state: FSMContext):
    await state.update_data(query_category=message.text)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –í–∞–º –∫–∞—á–µ—Å—Ç–≤–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—à –ò–ò —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: ',
        reply_markup=CANCEL_KB)
    await state.set_state(FindSpecialist.query)


@user_private_router.message(FindSpecialist.query, F.text)
async def answer_for_client(message: types.Message, session: AsyncSession, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await cancel_handler(message, state)
        return
    await state.update_data(query=message.text)
    await message.answer('–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∞—Å...')

    data = await state.get_data()
    query_category = data.get('query_category')
    client_query = data.get('query')

    specialists = await orm_get_specialists_category(session, query_category)

    query_obj = ClientQuery(
        query_category=query_category,
        query=client_query
    )

    session.add(query_obj)
    await session.commit()

    if not specialists:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.', reply_markup=MAIN_BTNS)
    else:
        sorted_ids, sorted_scores = await compare_texts(client_query, [
            (spec.id, spec.specialization, spec.full_name, spec.city, spec.age, spec.gender, spec.cv_text) for spec in
            specialists])
        if not sorted_ids:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.',
                                 reply_markup=MAIN_BTNS)
        else:
            for spec_id, relevance_score in zip(sorted_ids, sorted_scores):
                specialist = next(
                    spec for spec in specialists if spec.id == spec_id)
                await message.answer_document(
                    specialist.cv,
                    caption=f"""
                    <strong>{specialist.specialization}</strong>
                    \n–§–ò–û: {specialist.full_name}
                    \n–ì–æ—Ä–æ–¥: {specialist.city}
                    \n–í–æ–∑—Ä–∞—Å—Ç: {specialist.age}
                    \n<strong>–≠—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–∞ {relevance_score * 100:.2f}%</strong>
                    """
                )

    await state.clear()


@user_private_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    if AddSpecialist.specialist_for_change:
        AddSpecialist.specialist_for_change = None

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=MAIN_BTNS)


@user_private_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@user_private_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AddSpecialist.specialization:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddSpecialist.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddSpecialist.texts[previous.state]}')
            return
        previous = step

    await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É", reply_markup=MAIN_BTNS)
    await state.clear()


@user_private_router.message(State(None), or_f(Command('specialist'), (F.text.lower() == '—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç üë®üèº‚Äçüíª')))
async def specialist_cmd(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ Digix üîç\n–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 3-x —ç—Ç–∞–ø–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É üîê')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=SPECIALIST_CATEGORIES)
    await state.set_state(AddSpecialist.spec_category)


@user_private_router.message(AddSpecialist.spec_category)
async def add_spec_category(message: types.Message, state: FSMContext):
    await state.update_data(spec_category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: ", reply_markup=CANCEL_KB)
    await state.set_state(AddSpecialist.specialization)


@user_private_router.message(AddSpecialist.specialization, F.text)
async def add_specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û: ")
    await state.set_state(AddSpecialist.full_name)


@user_private_router.message(AddSpecialist.specialization)
async def add_specialization_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")


@user_private_router.message(AddSpecialist.full_name, F.text)
async def add_fullname(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥: ")
    await state.set_state(AddSpecialist.city)


@user_private_router.message(AddSpecialist.full_name)
async def add_fullname_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û")


@user_private_router.message(AddSpecialist.city, F.text)
async def add_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    await state.set_state(AddSpecialist.age)


@user_private_router.message(AddSpecialist.city)
async def add_city_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")


@user_private_router.message(AddSpecialist.age, F.text)
async def add_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª: ", reply_markup=GENDER_KB)
    await state.set_state(AddSpecialist.gender)


@user_private_router.message(AddSpecialist.age)
async def add_age_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª")


@user_private_router.message(AddSpecialist.gender, F.text)
async def add_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: ", reply_markup=WORK_FORMAT_KB)
    await state.set_state(AddSpecialist.work_format)


@user_private_router.message(AddSpecialist.gender)
async def add_gender_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª")


@user_private_router.message(AddSpecialist.work_format, F.text)
async def add_work_format(message: types.Message, state: FSMContext):
    await state.update_data(work_format=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CV(PDF): ", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddSpecialist.cv)


@user_private_router.message(AddSpecialist.work_format)
async def add_work_format_incorrect(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã")


@user_private_router.message(AddSpecialist.cv, F.document)
async def add_cv(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.document.mime_type != 'application/pdf':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
    else:
        file_id = message.document.file_id

        try:
            bot = message.bot  # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            cv_text = await extract_text_from_pdf(file_id, bot)
        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}")
            return

        await state.update_data(cv=file_id, cv_text=cv_text)
        data = await state.get_data()
        cv_file_id = data.get('cv')

        required_fields = ['spec_category', 'specialization',
                           'full_name', 'city', 'age', 'gender', 'work_format', 'cv']
        if not all(field in data for field in required_fields):
            await message.answer("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ
        obj = Specialist(
            spec_category=data.get('spec_category'),
            specialization=data.get('specialization'),
            full_name=data.get('full_name'),
            city=data.get('city'),
            age=int(data.get('age')),
            gender=data.get('gender'),
            work_format=data.get('work_format'),
            cv=cv_file_id,
            cv_text=data.get('cv_text')
        )

        session.add(obj)
        await session.commit()
        await state.clear()

        await message.answer(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ‚úÖ", reply_markup=MAIN_BTNS)


@user_private_router.message(AddSpecialist.cv)
async def incorrect_input(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
